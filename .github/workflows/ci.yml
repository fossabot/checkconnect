# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on: # yamllint disable-line rule:truthy
  push:
    branches: [main, develop, release]
  pull_request:
    types: [opened, reopened]

  release:
    types: [published]

  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  FORCE_COLOR: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    environment:
      name: release
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: "ðŸ§° Checkout Source Code"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Read python version from a file .python-version
          python-version-file: ".python-version"
          check-latest: true
          cache: pip

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install Hatch
        run: pip install --upgrade hatch

      - name: Check Version
        id: check-version
        run: |
          [[ "$(hatch version)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> $GITHUB_OUTPUT

      - name: Build and Publish
        run: hatch build

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: steps.check-version.outputs.prerelease == 'true'

      # - name: Publish to PyPI
      #  env:
      #    POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      #  run: poetry publish
