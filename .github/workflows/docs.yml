name: Build (and maybe release) the documentation

on:
  pull_request:
    paths:
      - python/**
      - docs/**
      - mkdocs.yml
      - pyproject.toml
      - .github/workflows/docs.yml

  repository_dispatch:
    types:
      - release-docs
  # Allow manual trigger for now
  workflow_dispatch:

env:
  IS_RELEASE: ${{ github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch' }}
  BUILD_ARGS: ${{ (github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch') && 'install MATURIN_EXTRA_ARGS="--manylinux off"' || 'develop' }}

jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: "ðŸ§° Checkout Source Code"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: docs/mlc-config.json
          folder-path: docs

  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: "ðŸ§° Checkout Source Code"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: psf/black@stable
        with:
          src: docs/src/python

  build-deploy:
    needs: [lint, markdown-link-check]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: "ðŸ§° Checkout Source Code"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Read python version from a file .python-version
          python-version-file: ".python-version"
          check-latest: true
          cache: pip

      - name: Build and install deltalake
        run: |
          cd python
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          make ${{ env.BUILD_ARGS }}

      - name: Install dependencies
        run: |
          source python/venv/bin/activate
          pip install -r docs/requirements.txt

      - name: Build
        run: |
          source python/venv/bin/activate
          mkdocs build

      - name: Deploy
        if: ${{ env.IS_RELEASE == 'true' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: site
          clean-exclude: |
            python/
            .nojekyll
          single-commit: false
          git-config-name: "Github Action"
          git-config-email: "deltars@users.noreply.github.com"
          commit-message: "doc update for tag `${{ github.event.client_payload.tag || github.ref_name }}`"
