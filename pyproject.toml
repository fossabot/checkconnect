# SPDX-FileCopyrightText: 2023 Jürgen Mülbert
#
# SPDX-License-Identifier: EUPL-1.2

[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "test_connections"
description = "Checks the availability of web addresses and NTP servers."
readme = "README.md"
keywords = [
  "availability",
  "check program",
  "NTP server",
  "testing",
  "web address",
]
license = { file = "LICENSE" }
maintainers = [
    { name="Jürgen Mülbert" },
    { email="juergen.muelbert@gmail" }
]
authors = [
   { name="Jürgen Mülbert" },
   { email="juergen.muelbert@gmail.com" }
]
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Testing",
]
dynamic = [
  "version",
]
dependencies = [
  "click>8.0",
]
[project.optional-dependencies]
dev = [
  "black",
  "hatch",
  "ipython",
  "mypy",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "PyYAML",
  "ruff",
  "types-jsonschema",
  "types-setuptools",
  'typing-extensions>=3.7.4; python_version < "3.10"',
  "yargs",
]
doc = [
  "docutils",
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-autodoc-typehints",
  "sphinx-click",
  "sphinx-contributors",
  "sphinx-copybutton",
  "sphinx-design",
  "sphinxcontrib-spelling",
  "sphinxext-opengraph",
]

[project.urls]
bugtracker = "https//github.com/jmuelbert/test-connections/issues"
changelog = "https://github.com/jmuelbert/test-connections/releases"
documentation = "https://jmuelbert.github.io/test-connections"
homepage = "https://github.com/jmuelbert/test-connections"
repository = "https://github.com/jmuelbert/test-connections"

[project.scripts]
test-connections = "test_connections:__main__"


[tool.hatch.version]
path = "src/test_connections/__init__.py"


[tool.hatch.metadata]
allow-direct-references = true
allow-ambiguous-features = true # disable normalization (tox-to-nox) for back-compat

[tool.hatch.build]
include = [
    "src/test_connections"
]

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/backend",
  "/scripts",
]

[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.default.scripts]
test = [
    # "black --diff --color --check .",
    # "ruff check .",
    # "mypy src/test_connections tests",
    "python -m pytest -pyargs -doctest-modules tests"
]

test-coverage = "python -m pytest --pyargs --doctest-modules --cov=test_connections --cov-report term test_connections"
test-coverage-html = "python -m pytest --pyargs --doctest-modules --cov=test_connections --cov-report html test_connections"

[tool.hatch.envs.doc]
features = ["dev", "doc"]

[tool.hatch.envs.doc.scripts]
clean = "rm -rf doc/_build"
clean-generated = [
    "rm -rf doc/user_guide/generated",
    "rm -rf doc/gallery"
]
clean-all = [
    "clean",
    "clean-generated",
    "rm -rf doc/_images"
]
build-html = [
    "mkdir -p doc/_images",
    "sphinx-build -b html -d doc/_build/doctrees doc doc/_build/html"
]
build-html-win = [
    "if not exist doc\\_images md doc\\_images",
    "sphinx-build -b html -d doc\\_build\\doctrees doc doc\\_build\\html"
]
doctest = "sphinx-build -b doctest -d doc/_build/doctrees doc doc/_build/doctest"
coverage = "sphinx-build -b coverage -d doc/_build/doctrees doc doc/_build/coverage"
serve = "(cd doc/_build/html && python -m http.server)"
publish-clean-build = [
    "clean-all",
    "build-html",
    "(cd doc && bash sync_website.sh)"
]

[tool.black]
line-length = 88
target-version = ["py37", "py38", "py39", "py310", "py311"]
include = '\.pyi?$'
packages = ["test_connections"]
extend-exclude = '.+/(dist|.venv|venv|build)/.+'

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "A",
    "B",  # flake8-bugbear
    "C",
    "C4",  # flake8-comprehensions
    "DTZ",
    "E",   # pycodestyle-error
    "EM",
    "ERA",  # flake8-eradicate/eradicate
    "F",
    "FBT",
    "I",  # isort
    "ICN",
    "ISC",
    "N",  # pep8-naming
    "PGH",  # pygrep
    "PIE",  # flake8-pie
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",  # ruff checks
    "S",
    "SIM",  # flake8-simplify
    "T",
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",
    "YTT",
]
ignore = [
    # E203, E266, W503 not yet supported by ruff,
    # see https://github.com/charliermarsh/ruff/issues/2402
    # Whitespace before ':'
    # "E203",
    # Too many leading '#' for block comment
    # "E266",
    # Line break occurred before a binary operator
    # "W503",
    # Line too long
    # "E501",
    # Relative imports are banned
    # "TID252",
    # zip() without an explicit strict= parameter set.
    # python>=3.10 only
    "B904",  # use 'raise ... from err'
    "B905",  # use explicit 'strict=' parameter with 'zip()'
    "N818"  #  Exception name should be named with an Error suffix
]
exclude = [
    ".git",
    "build",
    "__pycache__",
    "tests/examples_arguments_syntax",
    "tests/examples_methods_syntax",
]
fix = true
unfixable = [
    "ERA",  # do not autoremove commented out code
]

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [ "-ra", "--strict-markers", "--strict-config" ]
xfail_strict = true
junit_family = "xunit2"
filterwarnings = [ "error" ]
log_cli_level = "info"
testpaths = [ "tests" ]
markers = [
    "save_engine: marks some of the tests which are using an external package to save a chart to e.g. a png file. This mark is used to run those tests selectively in the build GitHub Action.",
]

[tool.mypy]
python_version = "3.7"
strict = true
explicit_package_bases = true
namespace_packages = true
show_error_codes = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
mypy_path = "src"
files = ["src/**/*.py",
         "tests/***.py",
          "noxfile.py"]
exclude = "(?x)(^tests/.*/fixtures | ^src/poetry/core/_vendor)"

[[tool.mypy.overrides]]
module = [
    'lark.*',
    'virtualenv.*',
]
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
    [tox]
    labels =
        test = py311, py310, py39
        static = flake8, mypy
    requires =
        tox>4
        virtualenv>20.2
    env_list =
        black
        docs
        ruff

    [testenv]
    usedevelop = true
    deps = pytest
    changedir = tests
    commands = pytest tests

    [testenv:black]
    deps = mypy
    changedir = {toxinidir}
    commands = mypy src

    [testenv:docs]
    basepython = python3
    usedevelop = false
    allowlist_externals =
        make
    deps =
        Sphinx
        pyenchant
        sphinxcontrib-spelling
    changedir = docs
    commands =
        make spelling

    [testenv:ruff]
    deps = ruff
    changedir = {toxinidir}
    commands = ruff .
"""
