# SPDX-FileCopyrightText: 2023-2024 Jürgen Mülbert
#
# SPDX-License-Identifier: EUPL-1.2

[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling>=1.22.2",
  "hatch-vcs>=0.3.0",
  "hatch-fancy-pypi-readme>=22.5",
]

[project]
name = "checkconnect"
description = "Checks the availability of web addresses and NTP servers."
keywords = [
  "availability",
  "check program",
  "NTP server",
  "testing",
  "web address",
]
license = "EUPL-1.2"
maintainers = [
  { name = "Jürgen Mülbert" },
  { email = "juergen.muelbert@outlook.de" },
]
authors = [{ name = "Jürgen Mülbert", email = "juergen.muelbert@outlook.de" }]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: OS Independent",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Testing",
]
dynamic = ["readme", "version"]
dependencies = [
  "click>=8.0.4",
  "fpdf>=1.7.2",
  "ntplib>=0.4.0",
  "requests>=2.27.1",
  "pyinstaller>=4.9",
]

[project.urls]
Bugtracker = "https://github.com/jmuelbert/checkconnect/issues"
Changelog = "https://github.com/jmuelbert/checkconnect/releases"
Documentation = "https://github.com/jmuelbert/checkconnect#readme"
Issues = "https://github.com/jmuelbert/checkconnect/issues"
Source = "https://github.com/jmuelbert/checkconnect"

[project.scripts]
checkconnect = "checkconnect.cli:main"

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/backend", "/scripts"]
include = ["/src/test_connections", "/CHANGELOG.md", "/README.md"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "python-simplified-semver"
local_scheme = "no-local-version"
parentdir_prefix_version = "hatch-"
git_describe_command = [
  "git",
  "describe",
  "--dirty",
  "--tags",
  "--long",
  "--match",
  "hatch-v*",
]

[tool.hatch.build.hooks.vcs]
version-file = "src/checkconnect/_version.py"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"

[tool.hatch.envs.hatch-static-analysis]
config-path = "ruff_defaults.toml"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest"]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = ["mypy>=1.0.0"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/test_connections tests}"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs~=1.5.3",
  "mkautodoc~=0.2.0",
  "mkdocs-material~=9.5.1",
  # Plugins
  "mkdocs-minify-plugin~=0.7.1",
  "mkdocs-git-revision-date-localized-plugin~=1.2.1",
  "mkdocs-git-committers-plugin-2~=2.2.2",
  "mkdocstrings-python~=1.7.5",
  "mkdocs-redirects~=1.2.1",
  "mkdocs-glightbox~=0.3.5",
  "mike~=2.0.0",
  # Extensions
  "mkdocs-click~=0.8.1",
  "pymdown-extensions~=10.5.0",
  # Necessary for syntax highlighting in code blocks
  "pygments~=2.17.2",
  # Validation
  # https://github.com/linkchecker/linkchecker/pull/669#issuecomment-1267236287
  "linkchecker @ git+https://github.com/linkchecker/linkchecker.git@d9265bb71c2054bf57b8c5734a4825d62505c779",
]

[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
MKDOCS_CONFIG = "mkdocs.yml"

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
ci-build = "mike deploy --config-file {env:MKDOCS_CONFIG} --update-aliases {args}"
validate = "linkchecker --config .linkcheckerrc site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = ["build --no-directory-urls", "validate"]

[tool.black]
line-length = 120
target-version = ['py36', 'py37', 'py38', 'py39', 'py310']
include = '''
    \.pyi?$
'''
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | ^lib/spack/external/
  | ^opt/
)/
'''

[tool.hatch.env.pre-commit]
dependencies = ["pre-commit>=4.0.0"]

[tool.hatch.envs.pre-commit.scripts]
check = "pre-commit run --all-files"

[tool.ruff]
fix = true
line-length = 120

[tool.ruff.format]
preview = true
docstring-code-format = true
docstring-code-line-length = 100

[tool.ruff.lint]
select = ["ALL"]
preview = true
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Use of `assert` detected
  "S101",
  # Use `contextlib.suppress(SchemaRegistryException)` instead of `try`-`except`-`pass`
  "SIM105",
  # Missing explicit `return` at the end of function able to return non-`None` value
  "RET503",
  # Unnecessary assignment to
  "RET504",
  # Unnecessary `else` after `return` statement
  "RET505",
  # Unnecessary `elif` after `raise` statement
  "RET506",
  # Possible hardcoded password
  "S105",
  "S106",
  "PLR",  # Design related pylint codes
  # RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF012",
  # Use `X | Y` for type annotations
  "UP007",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
  "S101",    # asserts allowed in tests...
  "FBT",     # don"t care about booleans as positional arguments in tests
  "INP001",  # no implicit namespace
  "D",       # don"t care about documentation in tests
  "S603",    # `subprocess` call: check for execution of untrusted input
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
]
[tool.codespell]
builtin = "clear,usage,en-GB_to_en-US"
write-changes = true
skip = "*.svg"
ignore-words = "ignore-words.txt"
count = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--strict-markers", "--strict-config", "--color=yes"]
xfail_strict = true
junit_family = "xunit2"
filterwarnings = ["error"]
log_cli_level = "info"
testpaths = ["tests"]
markers = [
  "save_engine: marks some of the tests which are using an external package to save a chart to e.g. a png file. This mark is used to run those tests selectively in the build GitHub Action.",
]

[tool.coverage.run]
source_pkgs = ["test_connections", "tests"]
branch = true
parallel = true
omit = ["src/test_connections/__about__.py"]

[tool.coverage.paths]
test_connections = [
  "src/test_connections",
  "*/checkconnect/src/test_connections",
]
tests = ["tests", "*/checkconnect/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.mypy]
disallow_untyped_defs = false
disallow_incomplete_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
strict = true
explicit_package_bases = true
namespace_packages = true
warn_no_return = false
warn_unused_ignores = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = ['test_connections.*', 'virtualenv.*']
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_no_return = true
